//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Zulu.BusinessService.Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FormControl))]
    public partial class ButtonControl: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ButtonID
        {
            get { return _buttonID; }
            set
            {
                if (_buttonID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ButtonID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _buttonID = value;
                    OnPropertyChanged("ButtonID");
                }
            }
        }
        private int _buttonID;
    
        [DataMember]
        public Nullable<int> FormID
        {
            get { return _formID; }
            set
            {
                if (_formID != value)
                {
                    ChangeTracker.RecordOriginalValue("FormID", _formID);
                    if (!IsDeserializing)
                    {
                        if (npFormControl != null && npFormControl.FormID != value)
                        {
                            npFormControl = null;
                        }
                    }
                    _formID = value;
                    OnPropertyChanged("FormID");
                }
            }
        }
        private Nullable<int> _formID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string DisplayName
        {
            get { return _displayName; }
            set
            {
                if (_displayName != value)
                {
                    _displayName = value;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        private string _displayName;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public FormControl npFormControl
        {
            get { return _npFormControl; }
            set
            {
                if (!ReferenceEquals(_npFormControl, value))
                {
                    var previousValue = _npFormControl;
                    _npFormControl = value;
                    FixupnpFormControl(previousValue);
                    OnNavigationPropertyChanged("npFormControl");
                }
            }
        }
        private FormControl _npFormControl;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            npFormControl = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupnpFormControl(FormControl previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.npButtonControls.Contains(this))
            {
                previousValue.npButtonControls.Remove(this);
            }
    
            if (npFormControl != null)
            {
                if (!npFormControl.npButtonControls.Contains(this))
                {
                    npFormControl.npButtonControls.Add(this);
                }
    
                FormID = npFormControl.FormID;
            }
            else if (!skipKeys)
            {
                FormID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("npFormControl")
                    && (ChangeTracker.OriginalValues["npFormControl"] == npFormControl))
                {
                    ChangeTracker.OriginalValues.Remove("npFormControl");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("npFormControl", previousValue);
                }
                if (npFormControl != null && !npFormControl.ChangeTracker.ChangeTrackingEnabled)
                {
                    npFormControl.StartTracking();
                }
            }
        }

        #endregion
    }
}
