//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Zulu.BusinessService.Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DamageType))]
    [KnownType(typeof(ProductVariant))]
    public partial class DamageByProductVariant: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int DamageByProductVariantID
        {
            get { return _damageByProductVariantID; }
            set
            {
                if (_damageByProductVariantID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DamageByProductVariantID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _damageByProductVariantID = value;
                    OnPropertyChanged("DamageByProductVariantID");
                }
            }
        }
        private int _damageByProductVariantID;
    
        [DataMember]
        public Nullable<int> DamageTypeID
        {
            get { return _damageTypeID; }
            set
            {
                if (_damageTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("DamageTypeID", _damageTypeID);
                    if (!IsDeserializing)
                    {
                        if (npDamageType != null && npDamageType.DamageTypeID != value)
                        {
                            npDamageType = null;
                        }
                    }
                    _damageTypeID = value;
                    OnPropertyChanged("DamageTypeID");
                }
            }
        }
        private Nullable<int> _damageTypeID;
    
        [DataMember]
        public Nullable<int> ProductVariantID
        {
            get { return _productVariantID; }
            set
            {
                if (_productVariantID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductVariantID", _productVariantID);
                    if (!IsDeserializing)
                    {
                        if (npProductVariant != null && npProductVariant.ProductVariantID != value)
                        {
                            npProductVariant = null;
                        }
                    }
                    _productVariantID = value;
                    OnPropertyChanged("ProductVariantID");
                }
            }
        }
        private Nullable<int> _productVariantID;
    
        [DataMember]
        public Nullable<int> Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private Nullable<int> _quantity;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedOn
        {
            get { return _createdOn; }
            set
            {
                if (_createdOn != value)
                {
                    _createdOn = value;
                    OnPropertyChanged("CreatedOn");
                }
            }
        }
        private Nullable<System.DateTime> _createdOn;
    
        [DataMember]
        public Nullable<decimal> DamagePrice
        {
            get { return _damagePrice; }
            set
            {
                if (_damagePrice != value)
                {
                    _damagePrice = value;
                    OnPropertyChanged("DamagePrice");
                }
            }
        }
        private Nullable<decimal> _damagePrice;
    
        [DataMember]
        public Nullable<int> ShopID
        {
            get { return _shopID; }
            set
            {
                if (_shopID != value)
                {
                    _shopID = value;
                    OnPropertyChanged("ShopID");
                }
            }
        }
        private Nullable<int> _shopID;
    
        [DataMember]
        public Nullable<System.Guid> UserGUID
        {
            get { return _userGUID; }
            set
            {
                if (_userGUID != value)
                {
                    _userGUID = value;
                    OnPropertyChanged("UserGUID");
                }
            }
        }
        private Nullable<System.Guid> _userGUID;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public DamageType npDamageType
        {
            get { return _npDamageType; }
            set
            {
                if (!ReferenceEquals(_npDamageType, value))
                {
                    var previousValue = _npDamageType;
                    _npDamageType = value;
                    FixupnpDamageType(previousValue);
                    OnNavigationPropertyChanged("npDamageType");
                }
            }
        }
        private DamageType _npDamageType;
    
        [DataMember]
        public ProductVariant npProductVariant
        {
            get { return _npProductVariant; }
            set
            {
                if (!ReferenceEquals(_npProductVariant, value))
                {
                    var previousValue = _npProductVariant;
                    _npProductVariant = value;
                    FixupnpProductVariant(previousValue);
                    OnNavigationPropertyChanged("npProductVariant");
                }
            }
        }
        private ProductVariant _npProductVariant;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            npDamageType = null;
            npProductVariant = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupnpDamageType(DamageType previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.npDamageByProductVariant.Contains(this))
            {
                previousValue.npDamageByProductVariant.Remove(this);
            }
    
            if (npDamageType != null)
            {
                if (!npDamageType.npDamageByProductVariant.Contains(this))
                {
                    npDamageType.npDamageByProductVariant.Add(this);
                }
    
                DamageTypeID = npDamageType.DamageTypeID;
            }
            else if (!skipKeys)
            {
                DamageTypeID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("npDamageType")
                    && (ChangeTracker.OriginalValues["npDamageType"] == npDamageType))
                {
                    ChangeTracker.OriginalValues.Remove("npDamageType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("npDamageType", previousValue);
                }
                if (npDamageType != null && !npDamageType.ChangeTracker.ChangeTrackingEnabled)
                {
                    npDamageType.StartTracking();
                }
            }
        }
    
        private void FixupnpProductVariant(ProductVariant previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.npDamageByProductVariants.Contains(this))
            {
                previousValue.npDamageByProductVariants.Remove(this);
            }
    
            if (npProductVariant != null)
            {
                if (!npProductVariant.npDamageByProductVariants.Contains(this))
                {
                    npProductVariant.npDamageByProductVariants.Add(this);
                }
    
                ProductVariantID = npProductVariant.ProductVariantID;
            }
            else if (!skipKeys)
            {
                ProductVariantID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("npProductVariant")
                    && (ChangeTracker.OriginalValues["npProductVariant"] == npProductVariant))
                {
                    ChangeTracker.OriginalValues.Remove("npProductVariant");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("npProductVariant", previousValue);
                }
                if (npProductVariant != null && !npProductVariant.ChangeTracker.ChangeTrackingEnabled)
                {
                    npProductVariant.StartTracking();
                }
            }
        }

        #endregion
    }
}
