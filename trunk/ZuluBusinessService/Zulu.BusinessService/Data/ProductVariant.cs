//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Zulu.BusinessService.Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DamageByProductVariant))]
    [KnownType(typeof(Product))]
    [KnownType(typeof(Supplier))]
    public partial class ProductVariant: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int ProductVariantID
        {
            get { return _productVariantID; }
            set
            {
                if (_productVariantID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductVariantID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _productVariantID = value;
                    OnPropertyChanged("ProductVariantID");
                }
            }
        }
        private int _productVariantID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string BarCode
        {
            get { return _barCode; }
            set
            {
                if (_barCode != value)
                {
                    _barCode = value;
                    OnPropertyChanged("BarCode");
                }
            }
        }
        private string _barCode;
    
        [DataMember]
        public Nullable<int> SupplierID
        {
            get { return _supplierID; }
            set
            {
                if (_supplierID != value)
                {
                    ChangeTracker.RecordOriginalValue("SupplierID", _supplierID);
                    if (!IsDeserializing)
                    {
                        if (npSupplier != null && npSupplier.SupplierID != value)
                        {
                            npSupplier = null;
                        }
                    }
                    _supplierID = value;
                    OnPropertyChanged("SupplierID");
                }
            }
        }
        private Nullable<int> _supplierID;
    
        [DataMember]
        public Nullable<int> ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    ChangeTracker.RecordOriginalValue("ProductID", _productID);
                    if (!IsDeserializing)
                    {
                        if (npProduct != null && npProduct.ProductID != value)
                        {
                            npProduct = null;
                        }
                    }
                    _productID = value;
                    OnPropertyChanged("ProductID");
                }
            }
        }
        private Nullable<int> _productID;
    
        [DataMember]
        public Nullable<int> PictureID
        {
            get { return _pictureID; }
            set
            {
                if (_pictureID != value)
                {
                    _pictureID = value;
                    OnPropertyChanged("PictureID");
                }
            }
        }
        private Nullable<int> _pictureID;
    
        [DataMember]
        public Nullable<bool> IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private Nullable<bool> _isActive;
    
        [DataMember]
        public Nullable<bool> RestrictedUnder18
        {
            get { return _restrictedUnder18; }
            set
            {
                if (_restrictedUnder18 != value)
                {
                    _restrictedUnder18 = value;
                    OnPropertyChanged("RestrictedUnder18");
                }
            }
        }
        private Nullable<bool> _restrictedUnder18;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedOn
        {
            get { return _createdOn; }
            set
            {
                if (_createdOn != value)
                {
                    _createdOn = value;
                    OnPropertyChanged("CreatedOn");
                }
            }
        }
        private Nullable<System.DateTime> _createdOn;
    
        [DataMember]
        public Nullable<System.DateTime> UpdatedOn
        {
            get { return _updatedOn; }
            set
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value;
                    OnPropertyChanged("UpdatedOn");
                }
            }
        }
        private Nullable<System.DateTime> _updatedOn;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DamageByProductVariant> npDamageByProductVariants
        {
            get
            {
                if (_npDamageByProductVariants == null)
                {
                    _npDamageByProductVariants = new TrackableCollection<DamageByProductVariant>();
                    _npDamageByProductVariants.CollectionChanged += FixupnpDamageByProductVariants;
                }
                return _npDamageByProductVariants;
            }
            set
            {
                if (!ReferenceEquals(_npDamageByProductVariants, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_npDamageByProductVariants != null)
                    {
                        _npDamageByProductVariants.CollectionChanged -= FixupnpDamageByProductVariants;
                    }
                    _npDamageByProductVariants = value;
                    if (_npDamageByProductVariants != null)
                    {
                        _npDamageByProductVariants.CollectionChanged += FixupnpDamageByProductVariants;
                    }
                    OnNavigationPropertyChanged("npDamageByProductVariants");
                }
            }
        }
        private TrackableCollection<DamageByProductVariant> _npDamageByProductVariants;
    
        [DataMember]
        public Product npProduct
        {
            get { return _npProduct; }
            set
            {
                if (!ReferenceEquals(_npProduct, value))
                {
                    var previousValue = _npProduct;
                    _npProduct = value;
                    FixupnpProduct(previousValue);
                    OnNavigationPropertyChanged("npProduct");
                }
            }
        }
        private Product _npProduct;
    
        [DataMember]
        public Supplier npSupplier
        {
            get { return _npSupplier; }
            set
            {
                if (!ReferenceEquals(_npSupplier, value))
                {
                    var previousValue = _npSupplier;
                    _npSupplier = value;
                    FixupnpSupplier(previousValue);
                    OnNavigationPropertyChanged("npSupplier");
                }
            }
        }
        private Supplier _npSupplier;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            npDamageByProductVariants.Clear();
            npProduct = null;
            npSupplier = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupnpProduct(Product previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.npProductVariants.Contains(this))
            {
                previousValue.npProductVariants.Remove(this);
            }
    
            if (npProduct != null)
            {
                if (!npProduct.npProductVariants.Contains(this))
                {
                    npProduct.npProductVariants.Add(this);
                }
    
                ProductID = npProduct.ProductID;
            }
            else if (!skipKeys)
            {
                ProductID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("npProduct")
                    && (ChangeTracker.OriginalValues["npProduct"] == npProduct))
                {
                    ChangeTracker.OriginalValues.Remove("npProduct");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("npProduct", previousValue);
                }
                if (npProduct != null && !npProduct.ChangeTracker.ChangeTrackingEnabled)
                {
                    npProduct.StartTracking();
                }
            }
        }
    
        private void FixupnpSupplier(Supplier previousValue, bool skipKeys = false)
        {
			//if (IsDeserializing)
			//{
			//    return;
			//}
    
			//if (previousValue != null && previousValue.npProductVariants.Contains(this))
			//{
			//    previousValue.npProductVariants.Remove(this);
			//}
    
			//if (npSupplier != null)
			//{
			//    if (!npSupplier.npProductVariants.Contains(this))
			//    {
			//        npSupplier.npProductVariants.Add(this);
			//    }
    
			//    SupplierID = npSupplier.SupplierID;
			//}
			//else if (!skipKeys)
			//{
			//    SupplierID = null;
			//}
    
			//if (ChangeTracker.ChangeTrackingEnabled)
			//{
			//    if (ChangeTracker.OriginalValues.ContainsKey("npSupplier")
			//        && (ChangeTracker.OriginalValues["npSupplier"] == npSupplier))
			//    {
			//        ChangeTracker.OriginalValues.Remove("npSupplier");
			//    }
			//    else
			//    {
			//        ChangeTracker.RecordOriginalValue("npSupplier", previousValue);
			//    }
			//    if (npSupplier != null && !npSupplier.ChangeTracker.ChangeTrackingEnabled)
			//    {
			//        npSupplier.StartTracking();
			//    }
			//}
        }
    
        private void FixupnpDamageByProductVariants(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DamageByProductVariant item in e.NewItems)
                {
                    item.npProductVariant = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("npDamageByProductVariants", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DamageByProductVariant item in e.OldItems)
                {
                    if (ReferenceEquals(item.npProductVariant, this))
                    {
                        item.npProductVariant = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("npDamageByProductVariants", item);
                    }
                }
            }
        }

        #endregion
    }
}
