//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Zulu.BusinessService.Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(State))]
    public partial class City: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CityID
        {
            get { return _cityID; }
            set
            {
                if (_cityID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CityID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cityID = value;
                    OnPropertyChanged("CityID");
                }
            }
        }
        private int _cityID;
    
        [DataMember]
        public Nullable<int> StateID
        {
            get { return _stateID; }
            set
            {
                if (_stateID != value)
                {
                    ChangeTracker.RecordOriginalValue("StateID", _stateID);
                    if (!IsDeserializing)
                    {
                        if (npState != null && npState.StateID != value)
                        {
                            npState = null;
                        }
                    }
                    _stateID = value;
                    OnPropertyChanged("StateID");
                }
            }
        }
        private Nullable<int> _stateID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Abbreviation
        {
            get { return _abbreviation; }
            set
            {
                if (_abbreviation != value)
                {
                    _abbreviation = value;
                    OnPropertyChanged("Abbreviation");
                }
            }
        }
        private string _abbreviation;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public State npState
        {
            get { return _npState; }
            set
            {
                if (!ReferenceEquals(_npState, value))
                {
                    var previousValue = _npState;
                    _npState = value;
                    FixupnpState(previousValue);
                    OnNavigationPropertyChanged("npState");
                }
            }
        }
        private State _npState;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            npState = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupnpState(State previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.npCities.Contains(this))
            {
                previousValue.npCities.Remove(this);
            }
    
            if (npState != null)
            {
                if (!npState.npCities.Contains(this))
                {
                    npState.npCities.Add(this);
                }
    
                StateID = npState.StateID;
            }
            else if (!skipKeys)
            {
                StateID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("npState")
                    && (ChangeTracker.OriginalValues["npState"] == npState))
                {
                    ChangeTracker.OriginalValues.Remove("npState");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("npState", previousValue);
                }
                if (npState != null && !npState.ChangeTracker.ChangeTrackingEnabled)
                {
                    npState.StartTracking();
                }
            }
        }

        #endregion
    }
}
