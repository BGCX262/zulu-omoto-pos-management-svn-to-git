//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Zulu.BusinessService.Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PurchaseProductVariant))]
    public partial class Purchase: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PurchaseID
        {
            get { return _purchaseID; }
            set
            {
                if (_purchaseID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PurchaseID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _purchaseID = value;
                    OnPropertyChanged("PurchaseID");
                }
            }
        }
        private int _purchaseID;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedOn
        {
            get { return _createdOn; }
            set
            {
                if (_createdOn != value)
                {
                    _createdOn = value;
                    OnPropertyChanged("CreatedOn");
                }
            }
        }
        private Nullable<System.DateTime> _createdOn;
    
        [DataMember]
        public string VoucherNumber
        {
            get { return _voucherNumber; }
            set
            {
                if (_voucherNumber != value)
                {
                    _voucherNumber = value;
                    OnPropertyChanged("VoucherNumber");
                }
            }
        }
        private string _voucherNumber;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public string ImportLicenseNumber
        {
            get { return _importLicenseNumber; }
            set
            {
                if (_importLicenseNumber != value)
                {
                    _importLicenseNumber = value;
                    OnPropertyChanged("ImportLicenseNumber");
                }
            }
        }
        private string _importLicenseNumber;
    
        [DataMember]
        public Nullable<decimal> CustomDutyAmount
        {
            get { return _customDutyAmount; }
            set
            {
                if (_customDutyAmount != value)
                {
                    _customDutyAmount = value;
                    OnPropertyChanged("CustomDutyAmount");
                }
            }
        }
        private Nullable<decimal> _customDutyAmount;
    
        [DataMember]
        public Nullable<decimal> CommercialTaxAmunt
        {
            get { return _commercialTaxAmunt; }
            set
            {
                if (_commercialTaxAmunt != value)
                {
                    _commercialTaxAmunt = value;
                    OnPropertyChanged("CommercialTaxAmunt");
                }
            }
        }
        private Nullable<decimal> _commercialTaxAmunt;
    
        [DataMember]
        public Nullable<decimal> AgentFees
        {
            get { return _agentFees; }
            set
            {
                if (_agentFees != value)
                {
                    _agentFees = value;
                    OnPropertyChanged("AgentFees");
                }
            }
        }
        private Nullable<decimal> _agentFees;
    
        [DataMember]
        public Nullable<decimal> OtherTax
        {
            get { return _otherTax; }
            set
            {
                if (_otherTax != value)
                {
                    _otherTax = value;
                    OnPropertyChanged("OtherTax");
                }
            }
        }
        private Nullable<decimal> _otherTax;
    
        [DataMember]
        public Nullable<System.DateTime> CustomReleaseDate
        {
            get { return _customReleaseDate; }
            set
            {
                if (_customReleaseDate != value)
                {
                    _customReleaseDate = value;
                    OnPropertyChanged("CustomReleaseDate");
                }
            }
        }
        private Nullable<System.DateTime> _customReleaseDate;
    
        [DataMember]
        public Nullable<int> TotalQuantity
        {
            get { return _totalQuantity; }
            set
            {
                if (_totalQuantity != value)
                {
                    _totalQuantity = value;
                    OnPropertyChanged("TotalQuantity");
                }
            }
        }
        private Nullable<int> _totalQuantity;
    
        [DataMember]
        public Nullable<decimal> TotalCost
        {
            get { return _totalCost; }
            set
            {
                if (_totalCost != value)
                {
                    _totalCost = value;
                    OnPropertyChanged("TotalCost");
                }
            }
        }
        private Nullable<decimal> _totalCost;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<PurchaseProductVariant> npPurchaseProductVariants
        {
            get
            {
                if (_npPurchaseProductVariants == null)
                {
                    _npPurchaseProductVariants = new TrackableCollection<PurchaseProductVariant>();
                    _npPurchaseProductVariants.CollectionChanged += FixupnpPurchaseProductVariants;
                }
                return _npPurchaseProductVariants;
            }
            set
            {
                if (!ReferenceEquals(_npPurchaseProductVariants, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_npPurchaseProductVariants != null)
                    {
                        _npPurchaseProductVariants.CollectionChanged -= FixupnpPurchaseProductVariants;
                    }
                    _npPurchaseProductVariants = value;
                    if (_npPurchaseProductVariants != null)
                    {
                        _npPurchaseProductVariants.CollectionChanged += FixupnpPurchaseProductVariants;
                    }
                    OnNavigationPropertyChanged("npPurchaseProductVariants");
                }
            }
        }
        private TrackableCollection<PurchaseProductVariant> _npPurchaseProductVariants;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            npPurchaseProductVariants.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupnpPurchaseProductVariants(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PurchaseProductVariant item in e.NewItems)
                {
                    item.npPurchase = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("npPurchaseProductVariants", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PurchaseProductVariant item in e.OldItems)
                {
                    if (ReferenceEquals(item.npPurchase, this))
                    {
                        item.npPurchase = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("npPurchaseProductVariants", item);
                    }
                }
            }
        }

        #endregion
    }
}
