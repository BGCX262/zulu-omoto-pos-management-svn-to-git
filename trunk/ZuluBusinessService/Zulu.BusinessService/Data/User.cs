//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Zulu.BusinessService.Data
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Address))]
    [KnownType(typeof(UserRole))]
    [KnownType(typeof(UserAttribute))]
    public partial class User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UserID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public Nullable<System.Guid> UserGUID
        {
            get { return _userGUID; }
            set
            {
                if (_userGUID != value)
                {
                    _userGUID = value;
                    OnPropertyChanged("UserGUID");
                }
            }
        }
        private Nullable<System.Guid> _userGUID;
    
        [DataMember]
        public Nullable<int> UserRoleID
        {
            get { return _userRoleID; }
            set
            {
                if (_userRoleID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserRoleID", _userRoleID);
                    if (!IsDeserializing)
                    {
                        if (npUserRole != null && npUserRole.UserRoleID != value)
                        {
                            npUserRole = null;
                        }
                    }
                    _userRoleID = value;
                    OnPropertyChanged("UserRoleID");
                }
            }
        }
        private Nullable<int> _userRoleID;
    
        [DataMember]
        public Nullable<int> PictureID
        {
            get { return _pictureID; }
            set
            {
                if (_pictureID != value)
                {
                    _pictureID = value;
                    OnPropertyChanged("PictureID");
                }
            }
        }
        private Nullable<int> _pictureID;
    
        [DataMember]
        public string FullName
        {
            get { return _fullName; }
            set
            {
                if (_fullName != value)
                {
                    _fullName = value;
                    OnPropertyChanged("FullName");
                }
            }
        }
        private string _fullName;
    
        [DataMember]
        public string Gender
        {
            get { return _gender; }
            set
            {
                if (_gender != value)
                {
                    _gender = value;
                    OnPropertyChanged("Gender");
                }
            }
        }
        private string _gender;
    
        [DataMember]
        public string NRCNumber
        {
            get { return _nRCNumber; }
            set
            {
                if (_nRCNumber != value)
                {
                    _nRCNumber = value;
                    OnPropertyChanged("NRCNumber");
                }
            }
        }
        private string _nRCNumber;
    
        [DataMember]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    OnPropertyChanged("Username");
                }
            }
        }
        private string _username;
    
        [DataMember]
        public string PasswordHash
        {
            get { return _passwordHash; }
            set
            {
                if (_passwordHash != value)
                {
                    _passwordHash = value;
                    OnPropertyChanged("PasswordHash");
                }
            }
        }
        private string _passwordHash;
    
        [DataMember]
        public string Salt
        {
            get { return _salt; }
            set
            {
                if (_salt != value)
                {
                    _salt = value;
                    OnPropertyChanged("Salt");
                }
            }
        }
        private string _salt;
    
        [DataMember]
        public Nullable<int> AddressID
        {
            get { return _addressID; }
            set
            {
                if (_addressID != value)
                {
                    ChangeTracker.RecordOriginalValue("AddressID", _addressID);
                    if (!IsDeserializing)
                    {
                        if (npAddress != null && npAddress.AddressID != value)
                        {
                            npAddress = null;
                        }
                    }
                    _addressID = value;
                    OnPropertyChanged("AddressID");
                }
            }
        }
        private Nullable<int> _addressID;
    
        [DataMember]
        public Nullable<bool> IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private Nullable<bool> _isActive;
    
        [DataMember]
        public Nullable<System.DateTime> CreatedOn
        {
            get { return _createdOn; }
            set
            {
                if (_createdOn != value)
                {
                    _createdOn = value;
                    OnPropertyChanged("CreatedOn");
                }
            }
        }
        private Nullable<System.DateTime> _createdOn;
    
        [DataMember]
        public Nullable<System.DateTime> UpdatedOn
        {
            get { return _updatedOn; }
            set
            {
                if (_updatedOn != value)
                {
                    _updatedOn = value;
                    OnPropertyChanged("UpdatedOn");
                }
            }
        }
        private Nullable<System.DateTime> _updatedOn;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public Address npAddress
        {
            get { return _npAddress; }
            set
            {
                if (!ReferenceEquals(_npAddress, value))
                {
                    var previousValue = _npAddress;
                    _npAddress = value;
                    FixupnpAddress(previousValue);
                    OnNavigationPropertyChanged("npAddress");
                }
            }
        }
        private Address _npAddress;
    
        [DataMember]
        public UserRole npUserRole
        {
            get { return _npUserRole; }
            set
            {
                if (!ReferenceEquals(_npUserRole, value))
                {
                    var previousValue = _npUserRole;
                    _npUserRole = value;
                    FixupnpUserRole(previousValue);
                    OnNavigationPropertyChanged("npUserRole");
                }
            }
        }
        private UserRole _npUserRole;
    
        [DataMember]
        public TrackableCollection<UserAttribute> npUserAttributes
        {
            get
            {
                if (_npUserAttributes == null)
                {
                    _npUserAttributes = new TrackableCollection<UserAttribute>();
                    _npUserAttributes.CollectionChanged += FixupnpUserAttributes;
                }
                return _npUserAttributes;
            }
            set
            {
                if (!ReferenceEquals(_npUserAttributes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_npUserAttributes != null)
                    {
                        _npUserAttributes.CollectionChanged -= FixupnpUserAttributes;
                    }
                    _npUserAttributes = value;
                    if (_npUserAttributes != null)
                    {
                        _npUserAttributes.CollectionChanged += FixupnpUserAttributes;
                    }
                    OnNavigationPropertyChanged("npUserAttributes");
                }
            }
        }
        private TrackableCollection<UserAttribute> _npUserAttributes;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            npAddress = null;
            npUserRole = null;
            npUserAttributes.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupnpAddress(Address previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.npUser.Contains(this))
            {
                previousValue.npUser.Remove(this);
            }
    
            if (npAddress != null)
            {
                if (!npAddress.npUser.Contains(this))
                {
                    npAddress.npUser.Add(this);
                }
    
                AddressID = npAddress.AddressID;
            }
            else if (!skipKeys)
            {
                AddressID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("npAddress")
                    && (ChangeTracker.OriginalValues["npAddress"] == npAddress))
                {
                    ChangeTracker.OriginalValues.Remove("npAddress");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("npAddress", previousValue);
                }
                if (npAddress != null && !npAddress.ChangeTracker.ChangeTrackingEnabled)
                {
                    npAddress.StartTracking();
                }
            }
        }
    
        private void FixupnpUserRole(UserRole previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.npUsers.Contains(this))
            {
                previousValue.npUsers.Remove(this);
            }
    
            if (npUserRole != null)
            {
                if (!npUserRole.npUsers.Contains(this))
                {
                    npUserRole.npUsers.Add(this);
                }
    
                UserRoleID = npUserRole.UserRoleID;
            }
            else if (!skipKeys)
            {
                UserRoleID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("npUserRole")
                    && (ChangeTracker.OriginalValues["npUserRole"] == npUserRole))
                {
                    ChangeTracker.OriginalValues.Remove("npUserRole");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("npUserRole", previousValue);
                }
                if (npUserRole != null && !npUserRole.ChangeTracker.ChangeTrackingEnabled)
                {
                    npUserRole.StartTracking();
                }
            }
        }
    
        private void FixupnpUserAttributes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UserAttribute item in e.NewItems)
                {
                    item.npUser = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("npUserAttributes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UserAttribute item in e.OldItems)
                {
                    if (ReferenceEquals(item.npUser, this))
                    {
                        item.npUser = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("npUserAttributes", item);
                    }
                }
            }
        }

        #endregion
    }
}
